import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useState, useRef } from 'react'
import { useValidateDate } from '@/hooks/useValidateDate'
import { useValidateDayInMonth } from '@/hooks/useValidateDayInMonth'

export default function Home () {
  const [day, setDay] = useState('')
  const [month, setMonth] = useState('')
  const [year, setYear] = useState('')
  const { errorMessage: dateError, isError: isDateError, value: dateValue, validateDays, validateMonth, validateYear, isValidPastDate } = useValidateDate()
  const { error: errorDayInMonth, isError: isErrorDayInMonth, isValidDayInMonth } = useValidateDayInMonth()
  const isMounted = useRef(false)

  const calculateAge = (birthDate) => {
    const today = new Date()
    const birth = new Date(birthDate)

    let year = today.getFullYear() - birth.getFullYear()
    let month = today.getMonth() - birth.getMonth()
    let day = today.getDate() - birth.getDate()

    if (day < 0) {
      month--
      day += new Date(today.getFullYear(), today.getMonth(), 0).getDate()
    }

    if (month < 0) {
      year--
      month += 12
    }

    return { day, month, year }
  }

  const handleSubmit = (e) => {
    e.preventDefault()
    isMounted.current = isMounted.current || true
    const dayForm = e.target.day.value
    const monthForm = e.target.month.value
    const yearForm = e.target.year.value
    validateDays(dayForm)
    validateMonth(monthForm)
    validateYear(yearForm)
    isValidDayInMonth(dayForm, monthForm)
    isValidPastDate(dayForm, monthForm, yearForm)
  }

  const calculatedResult = (isMounted.current && !isDateError.day && !isDateError.month && !isDateError.year && !isDateError.past && !isErrorDayInMonth) ? calculateAge(`${dateValue.year}-${dateValue.month}-${dateValue.day}`) : { day: '--', month: '--', year: '--' }
  return (
    <>
      <Head>
        <title>Age Calculator App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/images/favicon-32x32.png' />
      </Head>
      <main className={styles.main}>
        <div className={styles.container}>
          <form className={styles.form} onSubmit={handleSubmit}>
            <div className={styles.contentForm}>
              <div className={styles.formField}>
                <label htmlFor='day' className={`${styles.label} ${isDateError.day || isDateError.past || isErrorDayInMonth ? styles.errorLabel : ''}`}>DAY</label>
                <input
                  id='day'
                  className={`${styles.input} ${isDateError.day || isDateError.past || isErrorDayInMonth ? styles.errorInput : ''}`}
                  type='number'
                  name='day'
                  placeholder='DD'
                  value={day}
                  onChange={(e) => setDay(e.target.value)}
                  min='1'
                  max='31'
                  required
                />
                {isDateError.day && <p className={styles.error}>{dateError.day}</p>}
                {isErrorDayInMonth && <p className={styles.error}>{errorDayInMonth}</p>}
                {isDateError.past && <p className={styles.error}>{dateError.past}</p>}
              </div>
              <div className={styles.formField}>
                <label htmlFor='month' className={`${styles.label} ${isDateError.month || isDateError.past ? styles.errorLabel : ''}`}>MONTH</label>
                <input
                  id='month'
                  className={`${styles.input} ${isDateError.month || isDateError.past ? styles.errorInput : ''}`}
                  type='number'
                  name='month'
                  placeholder='MM'
                  value={month}
                  onChange={(e) => setMonth(e.target.value)}
                  min='1'
                  max='12'
                  required
                />
                {isDateError.month && <p className={styles.error}>{dateError.month}</p>}
              </div>
              <div className={styles.formField}>
                <label htmlFor='year' className={`${styles.label} ${isDateError.year || isDateError.past ? styles.errorLabel : ''}`}>YEAR</label>
                <input
                  id='year'
                  className={`${styles.input} ${isDateError.year || isDateError.past ? styles.errorInput : ''}`}
                  type='number'
                  name='year'
                  placeholder='YYYY'
                  value={year}
                  onChange={(e) => setYear(e.target.value)}
                  min='0'
                  required
                />
                {isDateError.year && <p className={styles.error}>{dateError.year}</p>}
              </div>
            </div>
            <button type='submit' className={styles.submit}><Image src='/images/icon-arrow.svg' height={44} width={46} alt='arrow submit button' loading='eager' /></button>
          </form>
          <hr className={styles.line} />
          <div>
            <p className={styles.resultText}><label className={styles.result}>{calculatedResult.year}</label> years</p>
            <p className={styles.resultText}><label className={styles.result}>{calculatedResult.month}</label> months</p>
            <p className={styles.resultText}><label className={styles.result}>{calculatedResult.day}</label> days</p>
          </div>
        </div>
      </main>
    </>
  )
}
